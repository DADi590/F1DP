/*
 * Copyright 2022 DADi590
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package main

import (
	"crypto/md5"
	"fmt"
	"os"
)

func showInitialScreen() {
	fmt.Println("-------------------")
	fmt.Println("F1DP v1.0 Installer")
	fmt.Println("-------------------")
	fmt.Println()
	fmt.Println("This program will install the F1DP Loader into the game EXE. After completing, this program will be " +
		"no longer necessary and you may delete it if you want.")
	fmt.Println()
	fmt.Println("-----Credits-----")
	fmt.Println("[I'm not sure what the order should be in this case, as it's all very important, so partial " +
		"alphabetical order.]")
	fmt.Println()
	fmt.Println("- DADi590 (me), for making F1DP and adapting all patches to the DOS EXE")
	fmt.Println("- Crafty for his sFall1 modifications")
	fmt.Println("- Timeslip for the original sFall1 mod")
	fmt.Println("- Sduibek for his patches")
	fmt.Println("- TeamX for their patches")
	fmt.Println("- xttl on the Doomworld forums for his posted knowledge, which helped making my life MUCH easier " +
		"while trying to figure out how to get the patcher to work on DOS")
	fmt.Println()
	fmt.Println("Credits completed, now press ENTER to continue to the Installer...")
	_, err := fmt.Scanln()
	if err != nil {
	}

	fmt.Println("------------------------------------------------------------------------")
	fmt.Println()
}

const ERR_NONE int = 0
const ERR_MISSING_PARAM int = 1
const ERR_FILE_NOT_FOUND int = 2
const ERR_CANT_WRITE_FILE int = 3
const ERR_WRONG_MD5_PATCHES int = 4

func main() {
	showInitialScreen()

	var argv []string = os.Args
	if 2 != len(argv) {
		fmt.Println("Missing one parameter: the path to the file to patch. Either drag the file to patch to this " +
			"program, or call it with the file path as parameter.")
		fmt.Println("The file must be one of the following:")
		//fmt.Println("- Official US Fallout 1 DOS EXE v1.1; MD5 hash: 6A41C641B789B44FD7BE1805CE030C9B")
		fmt.Println("- Official US Fallout 1 DOS EXE v1.2; MD5 hash: 3DCF41FA6784030BD5C71BE81954C899")
		fmt.Println()

		exit(ERR_MISSING_PARAM)
	}
	var file_path = argv[1]

	file_bytes, err := os.ReadFile(file_path)
	if nil != err {
		fmt.Println("File \"" + file_path + "\" not found")

		exit(ERR_FILE_NOT_FOUND)
	}

	var file_md5 string = fmt.Sprintf("%X", md5.Sum(file_bytes))
	fmt.Println("File path: \"" + file_path + "\"")
	fmt.Println("File MD5 hash: " + file_md5)
	fmt.Println("The file must be one of the following:")
	//fmt.Println("- Official US Fallout 1 DOS EXE v1.1; MD5 hash: 6A41C641B789B44FD7BE1805CE030C9B")
	fmt.Println("- Official US Fallout 1 DOS EXE v1.2; MD5 hash: 3DCF41FA6784030BD5C71BE81954C899")
	fmt.Println()

	if "3DCF41FA6784030BD5C71BE81954C899" != file_md5 {
		// Only the Fallout 1 DOS EXE v1.2 semi-official by TeamX. Else I need to be recalculating everything for the
		// other EXE too --> not happening, at least so soon. One already takes infinity.

		fmt.Println("MD5 NOT matched! No operation was done. Aborting the Installer...")

		exit(ERR_WRONG_MD5_PATCHES)
	} else {
		fmt.Println("MD5 matched!")
	}
	fmt.Println("------------------")
	fmt.Println()

	prepareLoader(file_bytes)

	var new_file_path string = file_path + "_patched.exe"
	err = os.WriteFile(new_file_path, file_bytes, 0644)
	if nil != err {
		fmt.Println("Error - Could not write to and/or create the patched DOS file.")

		exit(ERR_CANT_WRITE_FILE)
	} else {
		fmt.Println("Loader installed successfully to a new file: \"" + new_file_path + "\".")
	}
	fmt.Println()

	fmt.Println("------------------")
	fmt.Println()

	exit(ERR_NONE)
}

func prepareLoader(file_bytes []byte) {
	var initial_offset int = 0
	var new_bytes []byte = nil

	fmt.Println("Patches made to the game EXE:")

	///////////////////////
	fmt.Println("- Mark the code section as RWX") // Data executable for the allocated block, and Code writable to patch it
	// Making them writable and executable or not is actually the same, because they already are because it works either
	// way (xtll at Doomforums thinks the LE loader ignores the flags). But always good to do it just in case.
	initial_offset = 0x2D5C
	new_bytes = []byte{0x47}
	patchBytes(file_bytes, initial_offset, new_bytes)
	initial_offset = 0x2D74
	new_bytes = []byte{0x47}
	//patchBytes(file_bytes, initial_offset, new_bytes)
	// EDIT: don't make Data executable, or DOS/32A will crash. DOS/4GW won't, but then the game cannot be played with
	// DOS/32A just because of this change, which doesn't even do anything useful at all anyway.

	///////////////////////
	fmt.Println("- Extend the code section to its maximum size") // (required for the patches)
	initial_offset = 0x2D54
	new_bytes = []byte{0x00, 0xB0}
	patchBytes(file_bytes, initial_offset, new_bytes)
	fmt.Println("- Mark the start and end of the extension with 2 NOPs, one in each side") // (to be well visible where
	// it's possible to write stuff and where's not)
	initial_offset = 0x11E2D9
	new_bytes = []byte{0x90}
	patchBytes(file_bytes, initial_offset, new_bytes)
	initial_offset = 0x11EFFF
	new_bytes = []byte{0x90}
	patchBytes(file_bytes, initial_offset, new_bytes)

	///////////////////////
	fmt.Println("- Give a name to the code and data sections - csec and dsec (just because yes)") // (they had no name)
	initial_offset = 0x2D68
	new_bytes = []byte{0x63, 0x73, 0x65, 0x63}
	patchBytes(file_bytes, initial_offset, new_bytes)
	initial_offset = 0x2D80
	new_bytes = []byte{0x64, 0x73, 0x65, 0x63}
	patchBytes(file_bytes, initial_offset, new_bytes)

	///////////////////////
	fmt.Println("- Redirect 2 calls on main_() to the Loader")
	// Call for the Loader to load the external code
	initial_offset = 0xA68A3
	new_bytes = []byte{0x5D, 0x7A, 0x07, 0x00}
	patchBytes(file_bytes, initial_offset, new_bytes)
	// Call for the Loader to unload the external code
	initial_offset = 0x115B8B
	new_bytes = []byte{0x4B, 0x87, 0x00, 0x00}
	patchBytes(file_bytes, initial_offset, new_bytes)

	///////////////////////
	fmt.Println("- Write RSVD (\"Reserved\") in the end of the code section for special use within the Loader")
	// Call for the Loader to load the external code
	initial_offset = 0x11EFFB
	new_bytes = []byte{0x52, 0x53, 0x56, 0x44}
	patchBytes(file_bytes, initial_offset, new_bytes)

	///////////////////////
	fmt.Println("- Install the Loader")
	initial_offset = 0x11E2DA
	new_bytes = []byte{0x90, 0x90, 0x90, 0x90, 0x90, 0x50, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x81, 0xEE, 0xE5, 0xA2, 0x0E, 0x00, 0x8B, 0x86, 0xFB, 0xAF, 0x0E, 0x00, 0x8D, 0xBE, 0xE9, 0xAD, 0x0C, 0x00, 0xFF, 0xD7, 0x58, 0x8D, 0xBE, 0x0A, 0xA4, 0x0C, 0x00, 0xFF, 0xD7, 0xC3, 0x50, 0x53, 0x52, 0x56, 0x57, 0x55, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x81, 0xEE, 0x0F, 0xA3, 0x0E, 0x00, 0x8D, 0x86, 0x80, 0xA5, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0x8D, 0x86, 0xBD, 0xA5, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0x68, 0x90, 0x01, 0x00, 0x00, 0x68, 0x00, 0x06, 0x00, 0x00, 0x8D, 0xBE, 0xEF, 0xA5, 0x0E, 0x00, 0x57, 0x8D, 0x8E, 0x5A, 0x55, 0x0D, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x0C, 0x83, 0xF8, 0xFF, 0x0F, 0x84, 0xBD, 0x00, 0x00, 0x00, 0x50, 0x8D, 0x8E, 0xEC, 0xF9, 0x0B, 0x00, 0xFF, 0xD1, 0x83, 0xF8, 0xFF, 0x0F, 0x84, 0xC2, 0x00, 0x00, 0x00, 0x50, 0x8D, 0x8E, 0x68, 0xAC, 0x0C, 0x00, 0xFF, 0xD1, 0x85, 0xC0, 0x0F, 0x84, 0xD6, 0x00, 0x00, 0x00, 0x8B, 0xD0, 0x8B, 0x44, 0x24, 0x04, 0x8B, 0x1C, 0x24, 0x8D, 0x8E, 0x5F, 0x54, 0x0D, 0x00, 0xFF, 0xD1, 0x3B, 0x04, 0x24, 0x0F, 0x85, 0xE6, 0x00, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x04, 0x8D, 0x8E, 0xCC, 0x57, 0x0D, 0x00, 0xFF, 0xD1, 0x81, 0x3A, 0x4C, 0x45, 0x53, 0x00, 0x0F, 0x85, 0xFB, 0x00, 0x00, 0x00, 0x89, 0x72, 0x04, 0x8B, 0x86, 0x87, 0x30, 0x0B, 0x00, 0x2D, 0xBC, 0xE1, 0x0F, 0x00, 0x89, 0x42, 0x08, 0x8B, 0x1C, 0x24, 0x89, 0x5A, 0x0C, 0x89, 0x96, 0xFB, 0xAF, 0x0E, 0x00, 0x53, 0x8B, 0x4A, 0x0C, 0x03, 0xCA, 0x83, 0xE9, 0x04, 0x8B, 0xDA, 0x4B, 0x43, 0x3B, 0xD9, 0x0F, 0x8F, 0xFD, 0x00, 0x00, 0x00, 0x81, 0x3B, 0x12, 0x34, 0x56, 0x78, 0xE0, 0xEF, 0x83, 0xC3, 0x04, 0x8D, 0x86, 0xFC, 0xA5, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0x57, 0x8B, 0xFA, 0x33, 0xC0, 0xFF, 0xD3, 0x5F, 0x5B, 0x83, 0xC4, 0x08, 0x84, 0xC0, 0x0F, 0x85, 0x16, 0x01, 0x00, 0x00, 0xE9, 0x25, 0x01, 0x00, 0x00, 0x8D, 0x86, 0x29, 0xA6, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0xE9, 0xDE, 0x00, 0x00, 0x00, 0x8B, 0x04, 0x24, 0x8D, 0x8E, 0xCC, 0x57, 0x0D, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0x8D, 0x86, 0x4D, 0xA6, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0xE9, 0xB9, 0x00, 0x00, 0x00, 0x8B, 0x1C, 0x24, 0x8B, 0x44, 0x24, 0x04, 0x8D, 0x8E, 0xCC, 0x57, 0x0D, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x08, 0x53, 0x8D, 0x86, 0x7F, 0xA6, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x08, 0xE9, 0x8F, 0x00, 0x00, 0x00, 0x8B, 0xC2, 0x8D, 0x8E, 0xE9, 0xAD, 0x0C, 0x00, 0xFF, 0xD1, 0x8B, 0x44, 0x24, 0x04, 0x8D, 0x8E, 0xCC, 0x57, 0x0D, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x08, 0x8D, 0x86, 0xC6, 0xA6, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0xEB, 0x62, 0x83, 0xC4, 0x08, 0x83, 0xEC, 0x04, 0x8B, 0xC4, 0x0F, 0xB6, 0x4A, 0x03, 0x51, 0x8B, 0x0A, 0x89, 0x08, 0xC6, 0x40, 0x03, 0x00, 0x50, 0x8D, 0x86, 0xEA, 0xA6, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x10, 0x8B, 0xC2, 0x8D, 0x8E, 0xE9, 0xAD, 0x0C, 0x00, 0xFF, 0xD1, 0xEB, 0x2E, 0x8B, 0xC2, 0x8D, 0x8E, 0xE9, 0xAD, 0x0C, 0x00, 0xFF, 0xD1, 0x8B, 0x44, 0x24, 0x04, 0x8D, 0x8E, 0xCC, 0x57, 0x0D, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x08, 0x5B, 0x8D, 0x86, 0x2A, 0xA7, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0xEB, 0x00, 0x8D, 0x86, 0x6D, 0xA7, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0x8D, 0x8E, 0xDE, 0xE2, 0x0D, 0x00, 0xFF, 0xD1, 0xEB, 0x30, 0x8D, 0x86, 0xB4, 0xA7, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0xEB, 0x1C, 0x8D, 0x86, 0x02, 0xA8, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0x8D, 0x8E, 0xDE, 0xE2, 0x0D, 0x00, 0xFF, 0xD1, 0xEB, 0x00, 0x8D, 0x86, 0x72, 0xA8, 0x0E, 0x00, 0x50, 0x8D, 0x8E, 0xB0, 0xA3, 0x0C, 0x00, 0xFF, 0xD1, 0x83, 0xC4, 0x04, 0x8B, 0xCE, 0x5D, 0x5F, 0x5E, 0x5A, 0x5B, 0x58, 0x8D, 0x89, 0x50, 0x34, 0x01, 0x00, 0xFF, 0xD1, 0xC3, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x20, 0x46, 0x31, 0x44, 0x50, 0x20, 0x76, 0x31, 0x2E, 0x30, 0x20, 0x4C, 0x6F, 0x61, 0x64, 0x65, 0x72, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0D, 0x0A, 0x00, 0x2D, 0x20, 0x42, 0x49, 0x4E, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x3A, 0x20, 0x66, 0x31, 0x64, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2E, 0x62, 0x69, 0x6E, 0x0D, 0x0A, 0x00, 0x66, 0x31, 0x64, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2E, 0x62, 0x69, 0x6E, 0x00, 0x2D, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x74, 0x2E, 0x2E, 0x2E, 0x0D, 0x0A, 0x00, 0x2D, 0x20, 0x5B, 0x58, 0x5D, 0x20, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x6F, 0x70, 0x65, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x49, 0x4E, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x0D, 0x0A, 0x00, 0x2D, 0x20, 0x5B, 0x58, 0x5D, 0x20, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x49, 0x4E, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x0D, 0x0A, 0x00, 0x2D, 0x20, 0x5B, 0x58, 0x5D, 0x20, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x61, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x52, 0x41, 0x4D, 0x20, 0x6D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x28, 0x25, 0x6C, 0x75, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x29, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2E, 0x0D, 0x0A, 0x00, 0x2D, 0x20, 0x5B, 0x58, 0x5D, 0x20, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x49, 0x4E, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x0D, 0x0A, 0x00, 0x2D, 0x20, 0x5B, 0x58, 0x5D, 0x20, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x20, 0x42, 0x49, 0x4E, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2E, 0x20, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x4C, 0x45, 0x53, 0x30, 0x2C, 0x20, 0x62, 0x75, 0x74, 0x20, 0x67, 0x6F, 0x74, 0x20, 0x25, 0x73, 0x25, 0x64, 0x2E, 0x0D, 0x0A, 0x00, 0x2D, 0x20, 0x5B, 0x58, 0x5D, 0x20, 0x4D, 0x61, 0x69, 0x6E, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x66, 0x6F, 0x75, 0x6E, 0x64, 0x21, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x68, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6E, 0x2E, 0x2E, 0x2E, 0x0D, 0x0A, 0x00, 0x0D, 0x0A, 0x2D, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6B, 0x65, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x70, 0x72, 0x6F, 0x63, 0x65, 0x65, 0x64, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6D, 0x65, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4F, 0x55, 0x54, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2E, 0x2E, 0x2E, 0x0D, 0x0A, 0x00, 0x0D, 0x0A, 0x2D, 0x20, 0x54, 0x68, 0x65, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6C, 0x6C, 0x79, 0x21, 0x20, 0x54, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6D, 0x65, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x6E, 0x6F, 0x77, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x75, 0x74, 0x6F, 0x6D, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6C, 0x6C, 0x79, 0x2E, 0x0D, 0x0A, 0x00, 0x0D, 0x0A, 0x2D, 0x20, 0x54, 0x68, 0x65, 0x20, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x73, 0x21, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x6F, 0x6C, 0x65, 0x2E, 0x0D, 0x0A, 0x20, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6B, 0x65, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x70, 0x72, 0x6F, 0x63, 0x65, 0x65, 0x64, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6D, 0x65, 0x2E, 0x2E, 0x2E, 0x0D, 0x0A, 0x00, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x20, 0x46, 0x31, 0x44, 0x50, 0x20, 0x76, 0x31, 0x2E, 0x30, 0x20, 0x4C, 0x6F, 0x61, 0x64, 0x65, 0x72, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0D, 0x0A, 0x00}
	patchBytes(file_bytes, initial_offset, new_bytes)
}

/*
patchBytes replaces the bytes in a byte array by the given ones

-----------------------------------------------------------

> Params:

- file_bytes – the bytes slice header

- initial_offset – the file offset from where to start replacing the bytes

- new_bytes – a slice containing the bytes to replace starting on the given offset (can be as many as wanted, as long as
they don't go over the length of 'file_bytes' - this is NOT checked here)


> Returns:

- nothing
*/
func patchBytes(file_bytes []byte, initial_offset int, new_bytes []byte) {
	for i, offset := 0, initial_offset; i < len(new_bytes); offset, i = offset+1, i+1 {
		file_bytes[offset] = new_bytes[i]
	}
}

func exit(exit_code int) {
	fmt.Println()
	if 0 != exit_code {
		fmt.Println("ATTENTION: the Installer did not complete successfully. Please check the console for more information.")
		fmt.Println("Exiting with error code:", exit_code)
	} else {
		fmt.Println("The Installer completed all operations successfully!")
	}
	fmt.Println("Press ENTER to exit...")
	_, err := fmt.Scanln()
	if err != nil {
	}

	os.Exit(exit_code)
}
